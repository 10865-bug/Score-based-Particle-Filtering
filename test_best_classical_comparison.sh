#!/bin/bash
source ~/.bashrc
job_slot_to_gpu=(-1 0)

# duckdb -c "select cla.dataset_name, cla.model_name, cla.hyperparameter1 = gen.hyperparameter1 and cla.hyperparameter2 = gen.hyperparameter2 as same_hyperparameters from read_csv('sweeps/topk_hyperparameters_classical_comparison.csv') as cla join read_csv('sweeps/topk_hyperparameters.csv') as gen on cla.dataset_name = if(gen.dataset_name = 'NavierStokesDim256', 'NavierStokes', gen.dataset_name) and cla.model_name = gen.model_name and cla.sampling_time_step_count = gen.sampling_time_step_count and cla.k = gen.k where cla.k = 1 order by cla.dataset_name, cla.model_name"

# KuramotoSivashinsky

## EnFF
env_parallel --eta -j 1 --colsep , --header : CUDA_VISIBLE_DEVICES='${job_slot_to_gpu[{%}]}' python src/dafm/main.py rng_seed={rng_seed} dataset=KuramotoSivashinsky dataset.state_dimension={state_dimension} model={model} model/guidance=LocalConstant model.guidance.schedule.constant={hyperparameter2} model.sampling_time_step_count={sampling_time_step_count} model.diffusion_path.sigma_min={hyperparameter1} ::: $(duckdb -c "copy (select if(model_name = 'EnFF-OT', 'FlowMatchingMarginalConditionalOptimalTransport', 'FlowMatchingMarginalPreviousPosteriorToPredictive') as model, sampling_time_step_count, hyperparameter1, hyperparameter2 from read_csv('sweeps/topk_hyperparameters_classical_comparison.csv') where dataset_name = 'KuramotoSivashinsky' and k = 1 and tie_breaker = 1 and model_name in ('EnFF-OT', 'EnFF-F2P')) to '/dev/stdout'") ::: $(duckdb runs.sqlite -c "copy (select * from rng_seed_test) to '/dev/stdout'") ::: state_dimension 256 512 1024

## EnSF
env_parallel --eta -j 1 --colsep , --header : CUDA_VISIBLE_DEVICES='${job_slot_to_gpu[{%}]}' python src/dafm/main.py rng_seed={rng_seed} dataset=KuramotoSivashinsky dataset.state_dimension={state_dimension} model=ScoreMatchingMarginalBao2024EnSF model.sampling_score_norm=LInfty model.sampling_time_step_count={sampling_time_step_count} model.diffusion_path.epsilon_alpha={hyperparameter1} model.diffusion_path.epsilon_beta={hyperparameter2} ::: $(duckdb -c "copy (select sampling_time_step_count, hyperparameter1, hyperparameter2 from read_csv('sweeps/topk_hyperparameters_classical_comparison.csv') where dataset_name = 'KuramotoSivashinsky' and k = 1 and tie_breaker = 1 and model_name = 'EnSF') to '/dev/stdout'") ::: $(duckdb runs.sqlite -c "copy (select * from rng_seed_test) to '/dev/stdout'") ::: state_dimension 256 512

## Classical
env_parallel --eta -j 1 --header : --colsep , CUDA_VISIBLE_DEVICES='${job_slot_to_gpu[{%}]}' python src/dafm/main.py rng_seed={rng_seed} dataset=KuramotoSivashinsky dataset.state_dimension={state_dimension} model={model} model.inflation_scale.constant={hyperparameter1} :::: rng_seed_val.csv ::: state_dimension 256 512 1024 ::: $(duckdb -c "copy (select case when model_name = 'BPF' then 'BootstrapParticleFilter' when model_name = 'iEnKF-PO' then 'EnsembleKalmanFilterPerturbedObservationsIterative' end as model, hyperparameter1 from read_csv('sweeps/topk_hyperparameters_classical_comparison.csv') where dataset_name = 'KuramotoSivashinsky' and k = 1 and tie_breaker = 1 and model_name in ('BPF', 'iEnKF-PO')) to '/dev/stdout'")
env_parallel --eta -j 1 --header : --colsep , CUDA_VISIBLE_DEVICES='${job_slot_to_gpu[{%}]}' python src/dafm/main.py rng_seed={rng_seed} dataset=KuramotoSivashinsky dataset.state_dimension={state_dimension} model={model} model.inflation_scale.constant={hyperparameter1} model.loc_radius_gc={hyperparameter2} :::: rng_seed_val.csv ::: state_dimension 256 512 1024 ::: $(duckdb -c "copy (select case when model_name = 'EnKF-PO' then 'EnsembleKalmanFilterPerturbedObservations' when model_name = 'ESRF' then 'EnsembleRandomizedSquareRootFilter' when model_name = 'LETKF' then 'LocalEnsembleTransformKalmanFilter' end as model, hyperparameter1, hyperparameter2 from read_csv('sweeps/topk_hyperparameters_classical_comparison.csv') where dataset_name = 'KuramotoSivashinsky' and k = 1 and tie_breaker = 1 and model_name in ('EnKF-PO', 'ESRF', 'LETKF')) to '/dev/stdout'")

# NavierStokes

## EnFF
env_parallel --eta -j 1 --colsep , --header : CUDA_VISIBLE_DEVICES='${job_slot_to_gpu[{%}]}' python src/dafm/main.py rng_seed={rng_seed} dataset={dataset} model={model} model/guidance=LocalConstant model.guidance.schedule.constant={hyperparameter2} model.sampling_time_step_count={sampling_time_step_count} model.diffusion_path.sigma_min={hyperparameter1} ::: $(duckdb -c "copy (select if(model_name = 'EnFF-OT', 'FlowMatchingMarginalConditionalOptimalTransport', 'FlowMatchingMarginalPreviousPosteriorToPredictive') as model, sampling_time_step_count, hyperparameter1, hyperparameter2 from read_csv('sweeps/topk_hyperparameters_classical_comparison.csv') where dataset_name = 'NavierStokes' and k = 1 and tie_breaker = 1 and model_name in ('EnFF-OT', 'EnFF-F2P')) to '/dev/stdout'") ::: $(duckdb runs.sqlite -c "copy (select * from rng_seed_test) to '/dev/stdout'") ::: dataset NavierStokesTuneClassical NavierStokesDim64 NavierStokesDim256

## EnSF
env_parallel --eta -j 1 --colsep , --header : CUDA_VISIBLE_DEVICES='${job_slot_to_gpu[{%}]}' python src/dafm/main.py rng_seed={rng_seed} dataset={dataset} model=ScoreMatchingMarginalBao2024EnSF model.sampling_score_norm=LInfty model.sampling_time_step_count={sampling_time_step_count} model.diffusion_path.epsilon_alpha={hyperparameter1} model.diffusion_path.epsilon_beta={hyperparameter2} ::: $(duckdb -c "copy (select sampling_time_step_count, hyperparameter1, hyperparameter2 from read_csv('sweeps/topk_hyperparameters_classical_comparison.csv') where dataset_name = 'NavierStokes' and k = 1 and tie_breaker = 1 and model_name = 'EnSF') to '/dev/stdout'") ::: $(duckdb runs.sqlite -c "copy (select * from rng_seed_test) to '/dev/stdout'") ::: dataset NavierStokesTuneClassical NavierStokesDim64 NavierStokesDim256

## Classical
env_parallel --eta -j 1 --header : --colsep , CUDA_VISIBLE_DEVICES='${job_slot_to_gpu[{%}]}' python src/dafm/main.py rng_seed={rng_seed} dataset={dataset} model={model} model.inflation_scale.constant={hyperparameter1} :::: rng_seed_val.csv ::: dataset NavierStokesTuneClassical NavierStokesDim64 NavierStokesDim256 ::: $(duckdb -c "copy (select case when model_name = 'BPF' then 'BootstrapParticleFilter' when model_name = 'iEnKF-PO' then 'EnsembleKalmanFilterPerturbedObservationsIterative' end as model, hyperparameter1 from read_csv('sweeps/topk_hyperparameters_classical_comparison.csv') where dataset_name = 'NavierStokes' and k = 1 and tie_breaker = 1 and model_name in ('BPF', 'iEnKF-PO')) to '/dev/stdout'")
env_parallel --eta -j 1 --header : --colsep , CUDA_VISIBLE_DEVICES='${job_slot_to_gpu[{%}]}' python src/dafm/main.py rng_seed={rng_seed} dataset={dataset} model={model} model.inflation_scale.constant={hyperparameter1} model.loc_radius_gc={hyperparameter2} :::: rng_seed_val.csv ::: dataset NavierStokesTuneClassical NavierStokesDim64 NavierStokesDim256 ::: $(duckdb -c "copy (select case when model_name = 'EnKF-PO' then 'EnsembleKalmanFilterPerturbedObservations' when model_name = 'ESRF' then 'EnsembleRandomizedSquareRootFilter' when model_name = 'LETKF' then 'LocalEnsembleTransformKalmanFilter' end as model, hyperparameter1, hyperparameter2 from read_csv('sweeps/topk_hyperparameters_classical_comparison.csv') where dataset_name = 'NavierStokes' and k = 1 and tie_breaker = 1 and model_name in ('EnKF-PO', 'ESRF', 'LETKF')) to '/dev/stdout'")
