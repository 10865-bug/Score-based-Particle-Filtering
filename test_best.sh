#!/bin/bash
source ~/.bashrc
job_slot_to_gpu=(-1 0)

# EnFF
env_parallel --eta -j 1 --colsep , --header : CUDA_VISIBLE_DEVICES='${job_slot_to_gpu[{%}]}' python src/dafm/main.py rng_seed={rng_seed} dataset={dataset_name} model={model} model/guidance=LocalConstant model.guidance.schedule.constant={hyperparameter2} model.sampling_time_step_count={sampling_time_step_count} model.diffusion_path.sigma_min={hyperparameter1} ::: $(duckdb -c "copy (select dataset_name, if(model_name = 'EnFF-OT', 'FlowMatchingMarginalConditionalOptimalTransport', 'FlowMatchingMarginalPreviousPosteriorToPredictive') as model, sampling_time_step_count, hyperparameter1, hyperparameter2 from read_csv('sweeps/topk_hyperparameters.csv') where k = 1 and tie_breaker = 1 and model_name in ('EnFF-OT', 'EnFF-F2P')) to '/dev/stdout'") ::: $(duckdb runs.sqlite -c "copy (select * from rng_seed_test) to '/dev/stdout'")
# EnSF
env_parallel --eta -j 1 --colsep , --header : CUDA_VISIBLE_DEVICES='${job_slot_to_gpu[{%}]}' python src/dafm/main.py rng_seed={rng_seed} dataset={dataset_name} model=ScoreMatchingMarginalBao2024EnSF model.sampling_score_norm=LInfty model.sampling_time_step_count={sampling_time_step_count} model.diffusion_path.epsilon_alpha={hyperparameter1} model.diffusion_path.epsilon_beta={hyperparameter2} ::: $(duckdb -c "copy (select dataset_name, sampling_time_step_count, hyperparameter1, hyperparameter2 from read_csv('sweeps/topk_hyperparameters.csv') where k = 1 and tie_breaker = 1 and model_name = 'EnSF') to '/dev/stdout'") ::: $(duckdb runs.sqlite -c "copy (select * from rng_seed_test) to '/dev/stdout'")
